import 'package:dmaft/network.dart';
import 'package:dmaft/asym_crypto.dart';
import 'package:pointycastle/export.dart';

//NEVER USE THESE IN PRODUCTION!!
//THEY ARE ONLY INTENDED FOR INSECURE NETWORK TESTING.

AsymmetricKeyPair<RSAPublicKey, RSAPrivateKey> testKeypair1() {
  final p = BigInt.parse('147072042795840481810074441450194152127214752688910901621353600497871254224282200677049461348590776887456549479294546967808551181568322813837786798389437271827649810987027537259680337122832200305107957908364387614928792917261219874816253677003846200237906029300355305817918207668377333411562664541433846765243');
  final q = BigInt.parse('115814707599401811825420782482568286030002733631039756583075491357025297750359583269485844031851653831053499646480791983465144458008348666247288032097254035965098426509058252739540372598844348877274092859115659683968895018565889045703468325798235715275102341915299848250793365033478810063398376123589360960697');
  final n = BigInt.parse('17033105632446975140265209794666489529635017896516456784135176491581177523151977597640932578964789735712939605763205545201804001289837739991319888764792892125714162250355983751306226706214433016632370739346200192758707873632766599460543313127005129649738046928816811461059283559224107621125300285631642345983913593042514894578890146563723730568179707905752718551785204801341054890354105262100029357111336078188737725062789064919733785301708422460889068233762416391781754013036192991780110436004702754830736189948932254967741813340949849117765260164717641998029398860042732432085677506120984237779186384324900308654371');
  final e = BigInt.parse('65537');
  final d = BigInt.parse('8605828672377195185078072336557926076953090812662357401716342890111478251165117143187612486910937603627368604391889497729864566438944523652174865446691521492693399765533779910176721221541607123407099194672190988031590324728446032643201705666438711765294813767901830433168973209225760281225886797653767205703810705200797502578228359783987038416792112894521534560511568202580308450194863888927147947585537184415432180380951195420413666919335742229219857936269066465981719627686406604900572510439653382385954533417401551800216163089772558606759452822334681560832548359949985242377554297379711757611753812033902231807105');

  final privateKey = RSAPrivateKey(n, d, p, q);
  final publicKey = RSAPublicKey(n, e);
  return AsymmetricKeyPair(publicKey, privateKey);
}

String testID1() {
  return '550516DA-9F37-483F-AB87-A0DAA19203D9';
}

AsymmetricKeyPair<RSAPublicKey, RSAPrivateKey> testKeypair2() {
  final p = BigInt.parse('151792944363878212638888499791788981175058880100462503371758483750752213190288464636413146847821795601770721420315442757612087436332993921759129980200157435040976456625961458519797640753558590561358858919388521435391245002429949892328478444335964448248850155571572048582360378618527284314894366468961209924209');
  final q = BigInt.parse('143081975735650109970406805425411647095775469802177491744827493474211920106793176951051552877588963670136176819191573321657460358627579836241405953808374693224983644587909596564978066969005754193295017937085891390996050001225435243646502346561057266652930894572709137608551807819102683931699544333675511765013');
  final n = BigInt.parse('21718834382315309537860977371788058935810532751918495874025923345322691212013570174826386162936591738086648545906400142875290331140394893115222538703981514672298720547312774035992889770384643088577732520956813481765361723458237490080544309629605526484063664667080458254329669285058297129095752283556544422009090095659362366065904251027198186642322941567174161647358804348366734582675654621034187482794238243447805787418711812775217856338615319680331427189943880358641900785172192952447397599038126987091437619975963756882787429282575868359042229068737112595637905716111217801342904118943990962981196854131433547899717');
  final e = BigInt.parse('65537');
  final d = BigInt.parse('1993027907521617888531606846726786188564696949357429149738192212014139569236455910880966269189933361503472913851428818213406107259690478465522504047572284804602049306064345683391995957689446320928734659521099169619251497701723305389999442728724958973940810218774461387331410212251714282533253799125822942062665280033048914448146480060301717348803109278799318418856290359400744731717392280671873763177684796219446357317602844917061097205876674885589788669197479046301797568904975020076274593807647492729502684454897369656151340579419683325503554192943380175423761443781759262760335069992420388823624854680247556537985');

  final privateKey = RSAPrivateKey(n, d, p, q);
  final publicKey = RSAPublicKey(n, e);
  return AsymmetricKeyPair(publicKey, privateKey);
}

String testID2() {
  return 'A052F0CB-235B-4A6A-BAF5-A1E4903FDD75';
}